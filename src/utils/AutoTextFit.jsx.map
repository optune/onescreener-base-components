{"version":3,"file":"AutoTextFit.jsx","sources":["AutoTextFit.jsx"],"sourcesContent":["import React, { Component, createRef } from 'react'\nimport PropTypes from 'prop-types'\nimport styled, { css } from 'styled-components'\nimport { MediaMobile } from '../style/media.js'\n\nconst HorizontalAlignment = {\n  CENTER_LEFT: 'flex-start',\n  CENTER_CENTER: 'center',\n  CENTER_RIGHT: 'flex-end',\n}\n\nconst TextContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  opacity: ${({ show }) => (show ? 1 : 0.1)};\n  transition: opacity 0.3s;\n\n  display: flex;\n  justify-content: ${({ alignHorizontal = 'CENTER_LEFT' }) => HorizontalAlignment[alignHorizontal]};\n`\n\nconst TextContent = styled.div`\n  padding: ${({ padding }) => padding || '1em 2em'};\n  background-color: ${({ colorBackground }) => colorBackground || 'transparent'};\n\n  ${({ adjustWidth }) =>\n    adjustWidth\n      ? css`\n          max-width: 100%;\n        `\n      : css`\n          width: 100%;\n        `}\n\n  @media ${MediaMobile} {\n    padding: 1em 1em;\n  }\n`\n\nconst DEFAULTS = {\n  // amount of increasing or decreasing the fontsize\n  step: 0.5,\n\n  // the maximum font size in pixel.\n  maxFontSize: 100,\n\n  // the maximum font size in pixel.\n  minFontSize: 1,\n\n  // avoid line breaks\n  includeWidth: false,\n}\n\nconst updateFontSize = (element, { maxFontSize, minFontSize, step, includeWidth }) => {\n  const style = window.getComputedStyle(element)\n  let fontSize = parseInt(style.fontSize)\n  let fontSizeCandidate = maxFontSize\n\n  const parentWidth = element.parentElement.clientWidth\n  const parentHeight = element.parentElement.clientHeight\n\n  const inBounds = () => {\n    return (\n      parentHeight >= element.scrollHeight && (!includeWidth || parentWidth > element.scrollWidth)\n    )\n  }\n\n  const grow = () => {\n    fontSize += step\n\n    // Match criteria for currentFontSize\n    if (fontSize >= fontSizeCandidate || fontSize >= maxFontSize) return\n\n    // Set new style\n    element.style.fontSize = `${fontSize}px`\n\n    // Recursive shrink or grow\n    if (inBounds()) {\n      grow()\n    } else {\n      fontSizeCandidate = fontSize\n      shrink()\n    }\n  }\n\n  const shrink = () => {\n    fontSize -= step\n\n    // Match criteria for fontSizeCandidate\n    if (fontSize <= minFontSize) return\n\n    // Set new style\n    element.style.fontSize = `${fontSize}px`\n\n    // Recursive shrink or grow\n    if (inBounds()) {\n      grow()\n    } else {\n      shrink()\n    }\n  }\n\n  // Kick off resizing\n  if (inBounds()) {\n    grow()\n  } else {\n    shrink()\n  }\n\n  return\n}\n\nexport class AutoTextFit extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      ssrDone: false,\n      resized: true,\n    }\n\n    this.setNewWindowSize = this.setNewWindowSize.bind(this)\n    this.TextRef = createRef()\n  }\n\n  setNewWindowSize() {\n    this.setState({ resized: false })\n  }\n\n  componentDidMount() {\n    // Add window resize listener\n    window.addEventListener('resize', this.setNewWindowSize)\n\n    this.setState({ ssrDone: true, resized: false })\n  }\n\n  componentDidUpdate() {\n    const { ssrDone, resized } = this.state\n\n    if (ssrDone && !resized) {\n      // Resize text if window size is set or changes\n      const { maxFontSize, minFontSize, step, includeWidth } = this.props\n      const options = { maxFontSize, minFontSize, step, includeWidth }\n      const element = this.TextRef.current\n\n      updateFontSize(element, options)\n\n      this.setState({ resized: true })\n    }\n  }\n\n  render() {\n    const { alignHorizontal, adjustWidth, children, colorBackground, padding } = this.props\n    const { ssrDone, resized } = this.state\n\n    return (\n      <TextContainer show={ssrDone && resized} alignHorizontal={alignHorizontal}>\n        <TextContent\n          adjustWidth={adjustWidth}\n          colorBackground={colorBackground}\n          padding={padding}\n          ref={this.TextRef}\n        >\n          {children}\n          {/* Give some space at the end */}\n          <p>\n            <br />\n          </p>\n        </TextContent>\n      </TextContainer>\n    )\n  }\n}\n\nAutoTextFit.propTypes = {\n  alignHorizontal: PropTypes.oneOf(Object.keys(HorizontalAlignment)),\n  adjustWidth: PropTypes.bool,\n  children: PropTypes.node,\n  colorBackground: PropTypes.string,\n  includeWidth: PropTypes.bool,\n  maxFontSize: PropTypes.number,\n  minFontSize: PropTypes.number,\n  onResize: PropTypes.bool,\n  padding: PropTypes.string,\n  step: PropTypes.number,\n}\n\nAutoTextFit.defaultProps = DEFAULTS\n"],"names":["HorizontalAlignment","CENTER_LEFT","CENTER_CENTER","CENTER_RIGHT","TextContainer","styled","div","show","alignHorizontal","TextContent","padding","colorBackground","adjustWidth","css","MediaMobile","DEFAULTS","step","maxFontSize","minFontSize","includeWidth","updateFontSize","element","style","window","getComputedStyle","fontSize","parseInt","fontSizeCandidate","parentWidth","parentElement","clientWidth","parentHeight","clientHeight","inBounds","scrollHeight","scrollWidth","grow","shrink","AutoTextFit","Component","constructor","props","state","ssrDone","resized","setNewWindowSize","bind","TextRef","createRef","setState","componentDidMount","addEventListener","componentDidUpdate","options","current","render","children","propTypes","PropTypes","oneOf","Object","keys","bool","node","string","number","onResize","defaultProps"],"mappings":"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"}