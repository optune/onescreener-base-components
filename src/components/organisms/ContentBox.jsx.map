{"version":3,"file":"ContentBox.jsx","sources":["ContentBox.jsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { Fragment } from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { TextBox } from './TextBox.jsx'\nimport { GigsBox } from './GigsBox.jsx'\nimport { MediaBox } from './MediaBox.jsx'\n\nimport { MediaSmall, MediaMobile, NotMediaMobile } from '../../style/media.js'\n\nimport { renderHtml } from '../../utils/renderHtml.js'\n\nconst DesktopGrid = {\n  RowSize: 6,\n  ColumnSize: 6,\n  Unit: 16.666, // = 100 : 6\n}\n\nconst MobileGrid = {\n  RowSize: 3,\n  ColumnSize: 2,\n  RowUnit: 33.333,\n  ColumnUnit: 50,\n}\n\nconst LinkMargin = {\n  L: 9,\n  M: 7,\n  S: 5,\n}\n\nconst round = a => a.toFixed(2)\n\nconst getGridArea = (\n  { startRow, startColumn, endRow, endColumn, rowSpan, columnSpan },\n  linksPosition,\n  linksSize = 'M'\n) => {\n  const { ColumnSize, RowSize, Unit } = DesktopGrid\n  // Decide if margin is calculated from top or bottom and left or right\n  const isLeft = ColumnSize - endColumn >= startColumn - 1\n  const positionH = isLeft ? 'left' : 'right'\n\n  const isBottom =\n    RowSize - endRow < startRow - 1 ||\n    (endRow === RowSize && ['BOTTOM_CENTER', 'BOTTOM_LEFT', 'BOTTOM_RIGHT'].includes(linksPosition))\n  const positionV = isBottom ? 'bottom' : 'top'\n\n  // Calculate vertical and horizontal margins and width\n  const marginHUnit = isLeft ? startColumn - 1 : ColumnSize - endColumn\n  const marginH = (marginHUnit * Unit).toFixed(3)\n\n  const marginVUnit = isBottom ? RowSize - endRow : startRow - 1\n  const marginV = (marginVUnit * Unit).toFixed(3)\n\n  let marginVLinks = 0\n  let marginHLinks = 0\n\n  const linkMargin = LinkMargin[linksSize]\n\n  // Give extra margin if links are at same side as content\n  switch (linksPosition) {\n    case 'BOTTOM_CENTER':\n    case 'BOTTOM_LEFT':\n    case 'BOTTOM_RIGHT':\n      if (isBottom && endRow === RowSize) marginVLinks += linkMargin\n      break\n    case 'CENTER_RIGHT':\n      if (!isLeft && endColumn === ColumnSize) marginHLinks += linkMargin\n      break\n    case 'CENTER_LEFT':\n      if (isLeft && startColumn === 1) marginHLinks += linkMargin\n      break\n    default:\n    // Do nothing\n  }\n\n  const width = round(columnSpan * Unit)\n  const widthCorrection = round((columnSpan * (marginHLinks + 2)) / ColumnSize)\n\n  const height = round(rowSpan * Unit)\n  const heightCorrection = round((rowSpan * (marginVLinks + 2)) / RowSize)\n\n  const area = `\n    ${positionH}: calc(${marginH}vw + ${marginHLinks + 1}rem);\n    ${positionV}: calc(${marginV}vh + ${marginVLinks + 1}rem);\n    width: calc(${width}vw - ${widthCorrection}rem);\n    height: calc(${height}vh - ${heightCorrection}rem);\n  `\n\n  return css`\n    ${area}\n  `\n}\n\nconst getGridAreaMobile = (\n  { startRow, startColumn, endRow, endColumn, rowSpan, columnSpan },\n  linksSize = 'M'\n) => {\n  const { ColumnSize, ColumnUnit, RowSize, RowUnit } = MobileGrid\n\n  // Decide if margin is calculated from top or bottom and left or right\n  const isLeft = ColumnSize - endColumn >= startColumn - 1\n  const positionH = isLeft ? 'left' : 'right'\n\n  const positionV = 'bottom'\n\n  // Calculate vertical and horizontal margins and width\n  const marginHUnit = isLeft ? startColumn - 1 : ColumnSize - endColumn\n  const marginH = (marginHUnit * ColumnUnit).toFixed(3)\n\n  const marginVUnit = RowSize - endRow\n  const marginV = (marginVUnit * RowUnit).toFixed(3)\n\n  let marginVLinks = 0\n  let marginHLinks = 0\n\n  const linkMargin = LinkMargin[linksSize]\n\n  // Give extra margin if links are at same side as content\n  if (endRow === RowSize) marginVLinks += linkMargin\n\n  const width = round(columnSpan * ColumnUnit)\n  const widthCorrection = round((columnSpan * (marginHLinks + 2)) / ColumnSize)\n\n  const height = round(rowSpan * RowUnit)\n  const heightCorrection = round((rowSpan * (marginVLinks + 2)) / RowSize)\n\n  const area = `\n    ${positionH}: calc(${marginH}vw + 1rem);\n    ${positionV}: calc(${marginV}vh + ${linkMargin + 1}rem);\n    width: calc(${width}vw - ${(columnSpan * 2) / ColumnSize}rem);\n    height: calc(${height}vh - ${(rowSpan * (linkMargin + 2)) / RowSize}rem);\n  `\n\n  return css`\n    ${area}\n  `\n}\n\nconst FullscreenContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100vh;\n  width: 100vw;\n  z-index: 1;\n`\nconst ResponsiveContainer = styled.div`\n  position: absolute;\n  z-index: 3;\n\n  @media ${NotMediaMobile} {\n    ${({ area, linksPosition, linksSize }) => getGridArea(area, linksPosition, linksSize)}\n  }\n\n  @media ${MediaMobile} {\n    ${({ areaMobile, linksPosition, linksSize }) => getGridAreaMobile(areaMobile, linksSize)}\n  }\n\n  @media ${MediaSmall} {\n    min-width: 33.333vw;\n    min-height: 33.333vw;\n  }\n`\n\nconst getArea = ({ position, span }) => {\n  const [startRowField, startColumnField] = position.split('/')\n  const [rowSpanField, columnSpanField] = span.split('/')\n\n  const startRow = parseInt(startRowField)\n  const startColumn = parseInt(startColumnField)\n  const rowSpan = parseInt(rowSpanField)\n  const columnSpan = parseInt(columnSpanField)\n  const endRow = startRow + parseInt(rowSpan) - 1\n  const endColumn = startColumn + parseInt(columnSpan) - 1\n\n  return { startRow, startColumn, endRow, endColumn, rowSpan, columnSpan }\n}\n\nexport const ContentBox = ({ content, links }) => {\n  /*\n   * Get content values\n   */\n  const {\n    alignHorizontal,\n    color,\n    colorAccent,\n    colorBackground,\n    colorBackgroundAccent,\n    gigsAPI,\n    gigsList,\n    media,\n    position = '4/2',\n    positionMobile = '2/1',\n    span = '2/4',\n    spanMobile = '2/2',\n    text,\n    type,\n    wordWrap,\n  } = content\n  const colors = { color, colorAccent, colorBackground, colorBackgroundAccent }\n  const area = getArea({ position, span })\n  const areaMobile = getArea({ position: positionMobile, span: spanMobile })\n  const { border, circle, square } = links\n\n  const customHTML = content.customHTML || '<h1> Custom HTML </h1>'\n  const showHTML = content.showCustomHTML || false\n  /*\n   * Set content component\n   */\n\n  let fullscreen = false\n  let Content\n  switch (type) {\n    case 'GIGS':\n      Content = (\n        <GigsBox\n          alignHorizontal={alignHorizontal}\n          border={border}\n          circle={circle}\n          gigsAPI={gigsAPI}\n          gigsList={gigsList}\n          square={square}\n          {...colors}\n        />\n      )\n      break\n    case 'MEDIA':\n      Content = <MediaBox media={media} />\n      fullscreen = media ? media.fullscreen : false\n      break\n\n    case 'TEXT':\n      Content = showHTML ? (\n        <Fragment>{renderHtml(customHTML)}</Fragment>\n      ) : (\n        <TextBox {...colors} wordWrap={wordWrap} alignHorizontal={alignHorizontal}>\n          {renderHtml(text)}\n        </TextBox>\n      )\n      break\n\n    default:\n      Content = null\n  }\n\n  return fullscreen ? (\n    <FullscreenContainer>{Content}</FullscreenContainer>\n  ) : (\n    <ResponsiveContainer\n      area={area}\n      areaMobile={areaMobile}\n      linksPosition={links.list.length > 0 ? links.position : 'NONE'}\n      linksSize={links.size}\n    >\n      {Content}\n    </ResponsiveContainer>\n  )\n}\n"],"names":["DesktopGrid","RowSize","ColumnSize","Unit","MobileGrid","RowUnit","ColumnUnit","LinkMargin","L","M","S","round","a","toFixed","getGridArea","startRow","startColumn","endRow","endColumn","rowSpan","columnSpan","linksPosition","linksSize","isLeft","positionH","isBottom","includes","positionV","marginHUnit","marginH","marginVUnit","marginV","marginVLinks","marginHLinks","linkMargin","width","widthCorrection","height","heightCorrection","area","css","getGridAreaMobile","FullscreenContainer","styled","div","ResponsiveContainer","NotMediaMobile","MediaMobile","areaMobile","MediaSmall","getArea","position","span","startRowField","startColumnField","split","rowSpanField","columnSpanField","parseInt","ContentBox","content","links","alignHorizontal","color","colorAccent","colorBackground","colorBackgroundAccent","gigsAPI","gigsList","media","positionMobile","spanMobile","text","type","wordWrap","colors","border","circle","square","customHTML","showHTML","showCustomHTML","fullscreen","Content","renderHtml","list","length","size"],"mappings":"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"}